/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type MenuItem = {
  _type: "menuItem";
  name?: string;
  type?: "dropdown" | "reference";
  reference?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "masterClass";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "shortCourse";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "calendar";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "courseModule";
      };
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  menu?: Array<
    {
      _key: string;
    } & MenuItem
  >;
  footerContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Teacher = {
  _id: string;
  _type: "teacher";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Calendar = {
  _id: string;
  _type: "calendar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  classes?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "shortCourse";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "masterClass";
      };
  timeConfirmed?: boolean;
  startDate?: string;
  endDate?: string;
};

export type MasterClass = {
  _id: string;
  _type: "masterClass";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  body?: BlockContent;
  color?: Color;
  courses?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "shortCourse";
  }>;
  registrationLink?: string;
  minParticipants?: number;
  maxParticipants?: number;
  teachers?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "teacher";
  }>;
  contact?: string;
  payment?: string;
};

export type ShortCourse = {
  _id: string;
  _type: "shortCourse";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  minParticipants?: string;
  maxParticipants?: number;
  courseSize?: number;
  courseModule?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "courseModule";
  };
};

export type CourseModule = {
  _id: string;
  _type: "courseModule";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  color?: string;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | MenuItem
  | Settings
  | BlockContent
  | Teacher
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Calendar
  | MasterClass
  | ShortCourse
  | CourseModule
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | MediaTag
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: MasterClassListQuery
// Query: *[_type == "masterClass"] {    _id,    name,    slug,    color}
export type MasterClassListQueryResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  color: Color | null;
}>;
// Variable: MasterClassQuery
// Query: *[_type == "masterClass" && slug.current == $slug][0]{     name, body, courses, registrationLink, minParticipants, maxParticipants, teachers, color  }
export type MasterClassQueryResult = {
  name: string | null;
  body: BlockContent | null;
  courses: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "shortCourse";
  }> | null;
  registrationLink: string | null;
  minParticipants: number | null;
  maxParticipants: number | null;
  teachers: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "teacher";
  }> | null;
  color: Color | null;
} | null;
// Variable: MasterClassPathsQuery
// Query: *[_type == "masterClass" && defined(slug.current)][]{    "params": { "slug": slug.current }  }
export type MasterClassPathsQueryResult = Array<{
  params: {
    slug: string | null;
  };
}>;
// Variable: SettingsQuery
// Query: *[_type == "settings"][0]{  ...,  menu[]{    ...,    "slug": @.reference->slug.current  }}
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  menu: Array<{
    _key: string;
    _type: "menuItem";
    name?: string;
    type?: "dropdown" | "reference";
    reference?:
      | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "calendar";
        }
      | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "courseModule";
        }
      | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "masterClass";
        }
      | {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "shortCourse";
        };
    slug: string | null;
  }> | null;
  footerContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
} | null;
// Variable: CalendarQuery
// Query: *[_type == "calendar"]{  ...,  "course": {    "slug": @.classes->slug.current,    "name": @.classes->name,    "moduleName": @.classes->courseModule->name  }}
export type CalendarQueryResult = Array<{
  _id: string;
  _type: "calendar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  classes?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "masterClass";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "shortCourse";
      };
  timeConfirmed?: boolean;
  startDate?: string;
  endDate?: string;
  course: {
    slug: string | null;
    name: string | null;
    moduleName: null | string;
  };
}>;
// Variable: CalendarEventByCourseQuery
// Query: *[_type == "calendar" && classes->slug.current == $slug][]
export type CalendarEventByCourseQueryResult = Array<{
  _id: string;
  _type: "calendar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  classes?:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "masterClass";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "shortCourse";
      };
  timeConfirmed?: boolean;
  startDate?: string;
  endDate?: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "masterClass"] {\n    _id,\n    name,\n    slug,\n    color\n}': MasterClassListQueryResult;
    '*[_type == "masterClass" && slug.current == $slug][0]{ \n    name, body, courses, registrationLink, minParticipants, maxParticipants, teachers, color\n  }': MasterClassQueryResult;
    '*[_type == "masterClass" && defined(slug.current)][]{\n    "params": { "slug": slug.current }\n  }': MasterClassPathsQueryResult;
    '*[_type == "settings"][0]\n{\n  ...,\n  menu[]{\n    ...,\n    "slug": @.reference->slug.current\n  }\n}': SettingsQueryResult;
    '*[_type == "calendar"]{\n  ...,\n  "course": {\n    "slug": @.classes->slug.current,\n    "name": @.classes->name,\n    "moduleName": @.classes->courseModule->name\n  }\n}': CalendarQueryResult;
    '*[_type == "calendar" && classes->slug.current == $slug][]': CalendarEventByCourseQueryResult;
  }
}
